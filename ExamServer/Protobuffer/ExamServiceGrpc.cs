// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuffer/ExamService.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ExamServer {
  public static partial class ExamService
  {
    static readonly string __ServiceName = "ExamService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.AuthRequest> __Marshaller_AuthRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.AuthRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.AuthResponse> __Marshaller_AuthResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.AuthResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.ExamRequest> __Marshaller_ExamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.ExamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.ExamData> __Marshaller_ExamData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.ExamData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.PaperSubmission> __Marshaller_PaperSubmission = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.PaperSubmission.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.PaperSubmissionResponse> __Marshaller_PaperSubmissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.PaperSubmissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.ExamUpdate> __Marshaller_ExamUpdate = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.ExamUpdate.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.CommandRequest> __Marshaller_CommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.CommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ExamServer.CommandResponse> __Marshaller_CommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExamServer.CommandResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ExamServer.AuthRequest, global::ExamServer.AuthResponse> __Method_AuthendicateUser = new grpc::Method<global::ExamServer.AuthRequest, global::ExamServer.AuthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthendicateUser",
        __Marshaller_AuthRequest,
        __Marshaller_AuthResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ExamServer.ExamRequest, global::ExamServer.ExamData> __Method_GetExamData = new grpc::Method<global::ExamServer.ExamRequest, global::ExamServer.ExamData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExamData",
        __Marshaller_ExamRequest,
        __Marshaller_ExamData);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ExamServer.PaperSubmission, global::ExamServer.PaperSubmissionResponse> __Method_SubmitPaper = new grpc::Method<global::ExamServer.PaperSubmission, global::ExamServer.PaperSubmissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitPaper",
        __Marshaller_PaperSubmission,
        __Marshaller_PaperSubmissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ExamServer.ExamUpdate, global::ExamServer.ExamUpdate> __Method_StreamExamUpdates = new grpc::Method<global::ExamServer.ExamUpdate, global::ExamServer.ExamUpdate>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamExamUpdates",
        __Marshaller_ExamUpdate,
        __Marshaller_ExamUpdate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ExamServer.CommandRequest, global::ExamServer.CommandResponse> __Method_ExecuteRemoteCommand = new grpc::Method<global::ExamServer.CommandRequest, global::ExamServer.CommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteRemoteCommand",
        __Marshaller_CommandRequest,
        __Marshaller_CommandResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ExamServer.ExamServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ExamService</summary>
    [grpc::BindServiceMethod(typeof(ExamService), "BindService")]
    public abstract partial class ExamServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ExamServer.AuthResponse> AuthendicateUser(global::ExamServer.AuthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ExamServer.ExamData> GetExamData(global::ExamServer.ExamRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ExamServer.PaperSubmissionResponse> SubmitPaper(global::ExamServer.PaperSubmission request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamExamUpdates(grpc::IAsyncStreamReader<global::ExamServer.ExamUpdate> requestStream, grpc::IServerStreamWriter<global::ExamServer.ExamUpdate> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ExamServer.CommandResponse> ExecuteRemoteCommand(global::ExamServer.CommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ExamService</summary>
    public partial class ExamServiceClient : grpc::ClientBase<ExamServiceClient>
    {
      /// <summary>Creates a new client for ExamService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExamServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ExamService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExamServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExamServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExamServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.AuthResponse AuthendicateUser(global::ExamServer.AuthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthendicateUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.AuthResponse AuthendicateUser(global::ExamServer.AuthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthendicateUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.AuthResponse> AuthendicateUserAsync(global::ExamServer.AuthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthendicateUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.AuthResponse> AuthendicateUserAsync(global::ExamServer.AuthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthendicateUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.ExamData GetExamData(global::ExamServer.ExamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExamData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.ExamData GetExamData(global::ExamServer.ExamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExamData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.ExamData> GetExamDataAsync(global::ExamServer.ExamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExamDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.ExamData> GetExamDataAsync(global::ExamServer.ExamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExamData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.PaperSubmissionResponse SubmitPaper(global::ExamServer.PaperSubmission request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitPaper(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.PaperSubmissionResponse SubmitPaper(global::ExamServer.PaperSubmission request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitPaper, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.PaperSubmissionResponse> SubmitPaperAsync(global::ExamServer.PaperSubmission request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitPaperAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.PaperSubmissionResponse> SubmitPaperAsync(global::ExamServer.PaperSubmission request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitPaper, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ExamServer.ExamUpdate, global::ExamServer.ExamUpdate> StreamExamUpdates(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamExamUpdates(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ExamServer.ExamUpdate, global::ExamServer.ExamUpdate> StreamExamUpdates(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamExamUpdates, null, options);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.CommandResponse ExecuteRemoteCommand(global::ExamServer.CommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteRemoteCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ExamServer.CommandResponse ExecuteRemoteCommand(global::ExamServer.CommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteRemoteCommand, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.CommandResponse> ExecuteRemoteCommandAsync(global::ExamServer.CommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteRemoteCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ExamServer.CommandResponse> ExecuteRemoteCommandAsync(global::ExamServer.CommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteRemoteCommand, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ExamServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExamServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ExamServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AuthendicateUser, serviceImpl.AuthendicateUser)
          .AddMethod(__Method_GetExamData, serviceImpl.GetExamData)
          .AddMethod(__Method_SubmitPaper, serviceImpl.SubmitPaper)
          .AddMethod(__Method_StreamExamUpdates, serviceImpl.StreamExamUpdates)
          .AddMethod(__Method_ExecuteRemoteCommand, serviceImpl.ExecuteRemoteCommand).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ExamServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AuthendicateUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ExamServer.AuthRequest, global::ExamServer.AuthResponse>(serviceImpl.AuthendicateUser));
      serviceBinder.AddMethod(__Method_GetExamData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ExamServer.ExamRequest, global::ExamServer.ExamData>(serviceImpl.GetExamData));
      serviceBinder.AddMethod(__Method_SubmitPaper, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ExamServer.PaperSubmission, global::ExamServer.PaperSubmissionResponse>(serviceImpl.SubmitPaper));
      serviceBinder.AddMethod(__Method_StreamExamUpdates, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::ExamServer.ExamUpdate, global::ExamServer.ExamUpdate>(serviceImpl.StreamExamUpdates));
      serviceBinder.AddMethod(__Method_ExecuteRemoteCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ExamServer.CommandRequest, global::ExamServer.CommandResponse>(serviceImpl.ExecuteRemoteCommand));
    }

  }
}
#endregion
